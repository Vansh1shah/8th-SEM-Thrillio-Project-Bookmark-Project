interface Product {
  id: number;
  name: string;
  price: number;
  quantity: number;
}

class RetailShop implements Product {
  id: number;
  name: string;
  price: number;
  quantity: number;
  reorder: number = 5;

  constructor(id: number, name: string, price: number, quantity: number) {
    this.id = id;
    this.name = name;
    this.price = price;
    this.quantity = quantity;
  }

  purchase(quantity: number): void {
    if (this.quantity >= quantity) {
      this.quantity = this.quantity - quantity;
      console.log(`Purchased ${quantity} ${this.name}. Remaining stock ${this.quantity}`);
    } else {
      console.log(`Not Enough Stock ${this.name}.Available quantity ${this.quantity}`);
    }
    this.checkReOrder();
  }

  checkReOrder(): void {
    if (this.quantity < this.reorder) {
      console.log(`Reorder needed for ${this.name}.Current stock is ${this.quantity}`);
    }
  }
}

class Inventory {
  private products: RetailShop[] = [];

  addProduct(product: RetailShop): void {
    this.products.push(product);
    console.log(`${product.name} added to the Inventory.`)
  }

  purchaseProduct(productId: number, quantity: number): void {
    const product = this.products.find((p) => p.id === productId);
    if (product) {
      product.purchase(quantity);
    } else {
      console.log(`Product with ID ${productId} is not found in the Inventory`);
    }
  }
}

const inventory = new Inventory();

const product1 = new RetailShop(1, "Laptop", 1000, 20);
const product2 = new RetailShop(2, "Mouse", 2000, 10);

inventory.addProduct(product1);
inventory.addProduct(product2);

inventory.purchaseProduct(1, 2);
inventory.purchaseProduct(2, 4);
